const _ = require('lodash');
const path = require('path');
const models = require(path.join(__dirname, '..', 'models_index.js'));
const axios_general = require('axios');
const FormData = require('form-data');
const fs = require('fs');
const os = require('os');
const uuidv4 = require('uuidv4');
const globals = require('../config/globals');

// An exact copy of the the model definition that comes from the .json file
const definition = <%- definition -%>;

const url = "<%- url -%>";
const regex = /<%- regex -%>/;
const adapterName = "<%- adapterName -%>"
let axios = axios_general.create();
axios.defaults.timeout = globals.MAX_TIME_OUT;

module.exports = class <%- name -%>{

  /**
   * constructor - Creates an instance of the model stored in webservice
   *
   * @param  {obejct} input    Data for the new instances. Input for each field of the model.
   */

  constructor({id <%for(var key in attributes){-%>,<%=key-%><%}-%>}){
      this.id = id;
       <%for(var key in attributes){-%>
         this.<%=key-%> =<%=key-%>;
        <%}-%>
  }

  static get name(){
    return "<%- nameLc -%>";
  }

  static recognizeId(id){
    return id.test(regex);
  }

  static readById( id ){
    let query = `query readOne<%- nameCp -%>{ readOne<%- nameCp -%>(id: ${id}){id <%for(var key in attributes){-%>
       <%=key %>
     <%}-%> } }`

     return axios.post(url, {query:query}).then(res => {
        let data = res.data.data.readOne<%- nameCp -%>;
        return new <%- name -%>(data);
     }).catch(error => {
       error['url'] = url;
       handleError(error);
     });
  }

  static countRecords(search){
    let query = `query count<%- namePlCp -%>($search: search<%- nameCp -%>Input){
      count<%- namePlCp -%>(search: $search)
    }`

    return axios.post(url, {query:query, variables:{search: search}}).then(res=>{
      return res.data.data.count<%- namePlCp -%>;
    }).catch(error =>{
      error['url'] = url;
      handleError(error);
    });
  }

  static readAll(search, order, pagination){

    //TODO:
    //Validite cursor based. If undefined use first batch
    
    let query = `query <%- namePl -%>($search: search<%- nameCp -%>Input $pagination: paginationInput $order: [order<%- nameCp -%>Input]){
      <%- namePl -%>(search:$search pagination:$pagination order:$order){id <%for(var key in attributes){-%>
         <%=key %>
       <%}-%> } }`

       return axios.post(url, {query:query, variables: {search: search, order:order, pagination: pagination}}).then(res =>{
         let data = res.data.data.<%- namePl -%> ;
         return data.map(item => {return new <%- name -%>(item) });
       }).catch(error=>{
         error['url'] = url;
         handleError(error);
       });

  }

  static addOne(input){
    let query = `mutation add<%- nameCp -%>( <%for(var key in attributes){-%>
       $<%=key %>:<%= attributes[key]%>
     <%}-%>){
       add<%- nameCp -%>(<%for(var key in attributes){-%>
          <%=key %>:$<%= key%>
        <%}-%>){id <%for(var key in attributes){-%>
           <%=key %>
         <%}-%>}
     }`;

     return axios.post(url, {query:query, variables:input}).then(res =>{
       let data = res.data.data.add<%- nameCp -%>;
       return new <%- name -%>(data);
     }).catch(error =>{
       error['url'] = url;
       handleError(error);
     });
  }

  static deleteOne(id){
    let query = `mutation delete<%- nameCp -%>{ delete<%- nameCp -%>(id: ${id}) }`;

    return axios.post(url, {query: query}).then(res =>{
      return res.data.data.delete<%- nameCp -%>;
    }).catch(error =>{
      error['url'] = url;
      handleError(error);
    });

  }

  static updateOne(input){
    let query = `mutation update<%- nameCp-%>($id:ID! <%for(var key in attributes){-%>
       $<%=key %>:<%= attributes[key]%>
     <%}-%> ){
       update<%- nameCp-%>(id:$id <%for(var key in attributes){-%>
          <%=key %>:$<%= key%>
        <%}-%> ){id <%for(var key in attributes){-%>
           <%=key %>
         <%}-%>}
     }`

     return axios.post(url, {query:query, variables:input}).then(res => {
       let data = res.data.data.update<%- nameCp-%>;
       return new <%- name -%>(data);
     }).catch(error =>{
       error['url'] = url;
       handleError(error);
     });
  }

  static bulkAddCsv(context){
    let tmpFile = path.join(os.tmpdir(), uuidv4()+'.csv');

    return context.request.files.csv_file.mv(tmpFile).then(() =>{
      let query = `mutation {bulkAdd<%- nameCp -%>Csv{id}}`;
      let formData = new FormData();
      formData.append('csv_file', fs.createReadStream(tmpFile));
      formData.append('query', query);

      axios.post(url, formData,  {
        headers: formData.getHeaders()
      }).then(res =>{
          return res.data.data.bulkAdd<%- nameCp -%>Csv;
        }).catch(error =>{
          error['url'] = url;
          handleError(error);
        });

    }).catch(error =>{
      handleError(error);
    });
  }

  static  csvTableTemplate(){
      let query = `query { csvTableTemplate<%- nameCp-%> }`;
      return axios.post(url, {query:query}).then(res =>{
        return res.data.data.csvTableTemplate<%- nameCp-%>;
      }).catch(error =>{
        error['url'] = url;
        handleError(error);
      });
    }

    <%let associations_one = associations["belongsTo"]-%>
    <% for(let i=0; i < associations_one.length; i++){ -%>

    <%=associations_one[i].name%>Impl (search){
        if(search === undefined){
          return models.<%=associations_one[i].target_lc%>.readById(this.<%=associations_one[i].targetKey%>);
        }else{
          /*
          YOUR CODE GOES HERE
          */
          throw new Error('<%=associations_one[i].name%>Impl is not implemented in the model');
        }
      }
    <%}-%>

    <%associations_one = associations["hasOne"]-%>
    <% for(let i=0; i < associations_one.length; i++){ -%>

    <%=associations_one[i].name%>Impl (search){
        if(search === undefined){
          let simple_search = {
            "field": "<%=associations_one[i].targetKey%>",
            "value": {
              "value": this.id
            },
            "operator": "eq"
          }

          return models.<%=associations_one[i].target_lc%>.readAll(simple_search)
          .then( found => { if(found){
            return found[0];
          }
            return found;
          })

        }else{
          /*
          YOUR CODE GOES HERE
          */
          throw new Error('<%=associations_one[i].name%>Impl is not implemented in the model');
        }
      }
    <%}-%>



      <% associations_temp = associations["hasMany"]-%>
      <% for(let i=0; i < associations_temp.length; i++){ -%>
        <%=associations_temp[i].name%>FilterImpl({search,order,pagination}){
          if(search === undefined)
          {
            return models.<%=associations_temp[i].target_lc%>.readAll({"field" : "<%=associations_temp[i].targetKey%>", "value":{"value":this.id }, "operator": "eq"}, order, pagination);
          }else{
            return models.<%=associations_temp[i].target_lc%>.readAll({"operator":"and", "search":[ {"field" : "<%=associations_temp[i].targetKey%>", "value":{"value":this.id }, "operator": "eq"} , search] }, order, pagination )
          }
        }

        countFiltered<%=associations_temp[i].name_cp%>Impl ({search}){

          if(search === undefined)
          {
            return models.<%=associations_temp[i].target_lc%>.countRecords({"field" : "<%=associations_temp[i].targetKey%>", "value":{"value":this.id }, "operator": "eq"} );
          }else{
            return models.<%=associations_temp[i].target_lc%>.countRecords({"operator":"and", "search":[ {"field" : "<%=associations_temp[i].targetKey%>", "value":{"value":this.id }, "operator": "eq"} , search] })
          }

        }
      <%}-%>


      <% associations_temp = associations["belongsToMany"]-%>
      <% for(let i=0; i < associations_temp.length; i++){ -%>

        <%=associations_temp[i].name%>FilterImpl ({search,order,pagination}){
          /*
          YOUR CODE GOES HERE
          */
          throw new Error('<%=associations_temp[i].name%>FilterImpl is not implemented in the model');

        }

        countFiltered<%=associations_temp[i].name_cp%>Impl({search}){
          let query = `query count<%=associations_temp[i].name_cp%>($search: search<%=associations_temp[i].target_cp%>Input){
            readOne<%- nameCp -%>(id:${this.id}){countFiltered<%=associations_temp[i].name_cp%>(search: $search)}
          }`;

          return axios.post(url, {
              query: query,
              variables: {
                search: search
              }
          }).then(res => {
              return res.data.data.readOne<%- nameCp -%>.countFiltered<%=associations_temp[i].name_cp%>;
          }).catch(error => {
              error['url'] = url;
              handleError(error);
          });

        }
      <%}-%>

  static get definition(){
    return definition;
  }

  static base64Decode(cursor){
    return Buffer.from(cursor, 'base64').toString('utf-8');
  }

  base64Enconde(){
    return Buffer.from(JSON.stringify(this.stripAssociations())).toString('base64');
  }

  stripAssociations(){
    let attributes = Object.keys(<%- name -%>.definition.attributes);
    attributes.push('id');
    let data_values = _.pick(this, attributes);
    return data_values;
  }


};
